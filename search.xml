<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[《大数据与机器学习》读书笔记（一） 数据与数据平台]]></title>
      <url>%2F2017%2F03%2F12%2F%E3%80%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%2F</url>
      <content type="text"><![CDATA[数据环境与数据形态对于企业经营中产生的数据有三种形态： 生产数据：指某个生产系统的生产环境数据库中的数据。它会随着业务应用的变化而变化，是动态的，如用户的账户余额数据。 原始数据：对生产数据的解耦，包括数据脱敏、字段筛选、批量导出（将动态数据的“快照”保存下来）。其目的是为了防止生产数据与分析数据的数据直连，带来数据管理与应用的灾难 分析数据：对原始数据进行ETL之后的数据，主要从属性筛选、标准统一（如数据格式与字段含义的不一致）、优化存储（如创建索引，分区，分表存储）的角度进行ETL。 数据仓库平台数仓本质是解决大批量数据的入口与出口问题，为分析与应用提供支持。该书作者认为能稳定提供“顺滑”数据服务的数仓需要注下面两点： 更新规则： 分全量更新与增量更新两种方式。更新过程中要注意“部分提交”与“数据断档”问题，可行的解决方案是增加中间表，如图 存储规则： 分析发现，数仓用户使用的交易数据90%集中在近三个月，60%的作业仅集中在近一个月。所以可行的办法是“大表拆小表，小表组视图”，提高访问效率。 大数据平台之前一直把Hive与Hbase的概念混淆，趁此机会搞清楚。 Hbase Hive 基于HDFS的非关系型数据库（KV型） 关系型数据结构，是用SQL替代写MR的编程框架 物理表，适合存放非结构化的数据 纯逻辑表，本身不存储数据，完全依赖于HDFS和MR 处理数据是基于列的模式 基于MR处理数据,而MR是基于行的模式 HBase是为了支持弥补Hadoop对实时操作的缺陷的项目 Hive是建立在Hadoop之上为了减少MapReduce jobs编写工作的批处理系统 适合实时查询 适合查询分析统计]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[matplotlib绘图－斜上抛运动]]></title>
      <url>%2F2017%2F03%2F11%2Fmatplotlib%E8%BF%90%E7%94%A8%EF%BC%8D%E6%96%9C%E4%B8%8A%E6%8A%9B%E8%BF%90%E5%8A%A8%2F</url>
      <content type="text"><![CDATA[matplotlib是Python中绘制2D图形使用最多的库，可以很轻松的将数据图形化。本文绘制了斜上抛运动，下面是最终的效果。 （菲菲老师教得好，幸不辱命 (•‾̑⌣‾̑•)✧˖° ） 「准备工作」 导入所需数据包这里的animation.FuncAnimation（fig，update，generate，interval = 5）函数，是用于生成动态图片的。其中fig表示生成的图表对象；generate函数生成数据后传递给update函数更新，这样数据不断更新，图形也不停变化；interval表示时间间隔，设置的值越小，运动速度越快 123from matplotlib import pyplot as pltfrom matplotlib import animation import math 设置图形窗口参数 12345678910111213141516# 中文字体路径设置，防止中文不显示font=FontProperties(fname=r"c:\windows\fonts\simsun.ttc",size=14)# 初始化图形窗口fig = plt.figure()ax = fig.add_subplot(111) ax.set_aspect('equal')# 设置坐标轴的x,y取值范围xmin = 0ymin = 0ax = plt.axes(xlim = (xmin, xmax), ylim = (ymin, ymax)) # 创建一个圆，圆点在（0,0），半径为1circle = plt.Circle((xmin, ymin), 1)ax.add_patch(circle) 给定初始参数值 1234g = 9.8u = 30 # 斜上抛的初速度theta = 60 # 与水平方向的夹角θtheta_radians = math.radians(theta) # 返回一个角度的弧度值 计算衍生参数 1234t_flight= 2*u*math.sin(theta_radians)/g # 从A点到B点所需时间t_max = u*math.sin(theta_radians)/g # 上升到最大高度所需时间xmax = u*math.cos(theta_radians)*t_flight # AB两点的距离ymax = u*math.sin(theta)*t_max - 0.5*g*t_max**2 # 上升的最大高度 「制作动态效果」主要利用前面介绍的animation.FuncAnimation函数。于是我们需要构造generate与update函数，让它动起来~ generate函数123456#产生时间间隔参数（每个数据间隔为0.05），依次传递给updata函数 def generate(): t = 0 while t &lt; t_flight: t += 0.05 yield t update函数123456#更新时间间隔参数，从而不断改变圆的圆心坐标位置，让其移动 def update(t): x = u*math.cos(theta_radians)*t y = u*math.sin(theta_radians)*t - 0.5*g*t*t circle.center = x, y return circle, 打印相关信息12345def Print(): print (u"初始速度（米/秒）:",u) print (u"发射角度（度）",theta) print (u"飞行总时间（秒）",t_flight) print (u"飞行距离（米）",xmax) 动画函数123456789anim = animation.FuncAnimation(fig, update,generate,interval=10)# 附加信息anim= animation.FuncAnimation(fig, update,generate,interval=10)plt.title(u'导弹发射轨迹',fontproperties=font)plt.xlabel(u'水平距离(米)',fontproperties=font)plt.ylabel(u'导弹运行高度（米）',fontproperties=font)plt.show()Print() 最后就能看到首页的动态图了 ヾ(◍’౪`◍)ﾉﾞ]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[R数据可视化－动态、交互式地图神器（三）自定义Marker]]></title>
      <url>%2F2017%2F03%2F08%2FR%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%8D%E5%8A%A8%E6%80%81%E3%80%81%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%9C%B0%E5%9B%BE%E7%A5%9E%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89%E7%AC%A6%E5%8F%B7%E6%A0%87%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[Leaflet/LeafletCN 系列R数据可视化－动态、交互式地图神器（一）概述与实现R数据可视化－动态、交互式地图神器（二）地图与定位 特别喜欢Leaflet的marker自定义，主要有以下几种标记方法 【标记】 addMarkers(popup,icon) awesomeMarker(icon,library, markerColor,iconColor ) addCircleMarker(popup,color,fillOpacity) 1234567891011- popup：文字描述- icon：自定义图标- icon：图表类型- library：图标库- markerColor：背景颜色- iconColor ：图标颜色- popup：文字描述- color：颜色- fillOpacity：透明度 【第一类方法举例】123456df = data.frame(Lat = 31+ rnorm(10,0,1), Lon = 121 + rnorm(10,0,1)) # 生成10个随机点df #传数据 %&gt;% leaflet() # 加载地图容器 %&gt;% addTiles() # 加载底图 %&gt;% addMarkers() # 加默认标记 这种是默认的图标 接下来自定义icon12345678910111213warIcons &lt;- iconList( #自定义icon图标 cat = makeIcon("cat.png", iconWidth = 60, iconHeight = 60, iconAnchorX = 30, iconAnchorY = 30), dog = makeIcon("dog.png", iconWidth = 60, iconHeight = 60, iconAnchorX = 30, iconAnchorY = 30)) geo %&gt;% leaflet() #加地图容器 %&gt;% addProviderTiles("Thunderforest.SpinalMap") #加地图底图 %&gt;% addMarkers(icon=~warIcons[type]) #使用自定义的icon 其中geo数据长这样 其中makeIcon用法123456makeIcon(iconUrl ,iconWidth,iconHeight,iconAnchorX ,iconAnchorY) - iconUrl : 图标的url地址 - iconWidth ：图标的宽度 - iconHeight: 图标的高度 - iconAnchorX :图标的中心点x轴偏移（以左上角为0,0) - iconAnchorY :图标的中心点Y轴偏移（以左上角为0,0) 效果 【第二类方法举例】可以在library参数中设定你希望选择的图标库，有以下几个： fontIcons glyphicon Ionicons 如：1234567myIcon = makeAwesomeIcon(icon = "book", library = "glyphicon",markerColor = "purple")df%&gt;% leaflet() %&gt;% setView() %&gt;% addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %&gt;% addAwesomeMarkers(icon=myIcon) 效果 【第三类方法举例】addCircleMarkers()方法更简单，直接把点作为一个镶边的圆（或者说圆符号）绘制到地图上，如：123leaflet(df) %&gt;% addProviderTiles("CartoDB.Positron")%&gt;% addCircleMarkers() 效果]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo搭建个人博客]]></title>
      <url>%2F2017%2F03%2F05%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[前言人啊，总有那么一瞬间，想把自己各种美好与不美好的瞬间，经历与感悟给记录下来。当自己回过头再来看的时候，也许会哭，会笑，酸甜苦辣，各有滋味。当这些点点滴滴汇聚起来之后，估计我会仰天大吼：这一世没白活！ 正文这个周末在网上各种找资料、跨过无数坑之后，个人博客算是初步完成了。 【目标与要求】 美观：对审美有一定要求，有相对不错的外观 功能：起码能分类、打标签、各种时间维度能归档 学习成本：语言、代码相对更容易，学习成本相对较低 时间与金钱成本：最好不用花钱（能省点是一点，我的土壕朋友请无视），不用花太多时间在系统运维 【产品选型】 第三方博客平台，如CSDN、博客园、新浪、豆瓣等。可直接写文章，但模板、样式固定，不算难看也不算好看（简书整体不错，简约风，但是不能带标签，而且鸡汤较多…） 博客工具，部分支持MarkDown语法，免去把文本转化为HTML的痛苦，主要有： wordpress：功能强大，要有主机与域名（免费有限制，正经使用的要花钱购买、备案，还要考虑审批部门的效率…你懂的），折腾太费事费时 ghost：类似wordpress，相对较重，也是动态网站、需要依赖数据库 Jekyll：静态文件生成器，支持Markdown，能部署到github。依赖较多库，windows用户不友好，无本地预览功能 hexo：安装简单，依赖少（仅node），中文支持好（台湾人写的），命令少，易于记忆，可本地实现简单预览，支持markdown。 果断选择了Hexo，下面是介绍下主角： “A fast, simple &amp; powerful blog framework, powered by Node.js.”（官方版）。它是一个Node的静态博客框架，因此没有数据库。可直接部署到github上。好处大大的：省去服务器成本，减少系统运维(系统管理、备份、网络)。 【安装操作】 安装node.js：用来生成静态页面[点击安装node] 注册Github账号：欢迎加入全球最大的同性交友网站ヾ(◍’౪`◍)ﾉﾞ。不限流量、免费提供开放的托管静态页面的网站。 注意！新建的Repo一定要与你的github用户名一模一样，如[username].github.io 安装Git：用于把本地的Hexo内容沟通,传输,部署到Github上。安装教程可参考廖雪峰的博客[点击安装Git] 以下步骤一定要做！ 12$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com" 安装Hexo 在git bash中敲： 1npm install hexo-cli -g 【构建博客】 初始化 创建一个新的文件夹（放你博客的地方），右键点击Git Bash Here，执行： 1hexo init 可以通过以下命令查看是否执行成功 1hexo s 出现以下代码，恭喜成功~，并在浏览器输入：http://localhost:4000/ 进行本地预览（默认端口4000） 12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 配置与部署 我们看到之前创建的博客所在文件夹结构： Blog ｜ ｜－－ .deploy_git ｜－－ node_modules ｜－－ scaffolds ｜－－ source ｜－－ themes ｜－－ _config.yml ｜－－ _gitinore ｜－－ db.json ｜－－ package.json ｜－－ debug.log 现在需要_config.yml与我们github用户名对应的仓库建立联系。打开_config.yml文件，拉到最后对应修改： 123deploy:type: gitrepo: http://github.com/[username]/[username].github.io 并部署： 123hexo clean # 清除缓存hexo generate # 生成静态页面hexo deploy # 上传部署 到现在，我们的“简装房”就有了，后续需要通过主题替换与各种功能设置，来鸟枪换大炮，变成“精装房”(▰˘◡˘▰) ~。 参考资料 Hexo 中文文档 【包涵：文档、API、插件、主题】NexT 使用文档【包含：开始使用、主题配置、第三方服务、内建标签、常见问题】]]></content>
    </entry>

    
  
  
</search>
